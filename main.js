// Configuration des joueurs
const playerDetails = {
  coco: {
    name: "Coco",
    description:
      "Elle adore lire les r√®gles que personne ne comprend, c'est une experte en analyse de plateau qui peut passer 20 minutes √† r√©fl√©chir √† son coup... pour finalement jouer exactement ce qu'on lui avait sugg√©r√© au d√©but ! ü§î D√©tient le record du 'Ah mais si j'avais su...' le plus utilis√© en une soir√©e.",
    favoriteGame: "Cortex",
    funFact: "A d√©j√† gagn√© une partie sans comprendre les r√®gles",
  },
  stacy: {
    name: "Stacy",
    description:
      "Reine incontest√©e du bluff, capable de faire croire qu'elle a une mauvaise main m√™me quand elle gagne ! üÉè Son rire contagieux peut d√©concentrer les adversaires - technique secr√®te ?",
    favoriteGame: "Memory",
    funFact: "Se souvient de toutes les cartes sauf quand c'est son tour",
  },
  fab: {
    name: "Fab le kebab",
    description:
      "Le joueur qui arrive toujours avec des snacks et pizzas pour amadouer les autres. üåØ Ma√Ætre dans l'art de n√©gocier des alliances... qu'il trahit syst√©matiquement !",
    favoriteGame: "6 qui prend",
    funFact:
      "N'a jamais jou√© un seul tour sans dire 'Ah mais c'est pas ce que je voulais faire √ßa !'",
  },
  moutt: {
    name: "Moutt",
    description:
      "Le strat√®ge silencieux qui ne dit rien pendant toute la partie... pour finalement r√©v√©ler qu'il √©tait le saboteur depuis le d√©but ! üïµÔ∏è Expert en analyse de ses adversaires, mais ne gagne jamais",
    favoriteGame: "Saboteur",
    funFact:
      "Capable de m√©langer les cartes pendant 10 minutes pour '√™tre s√ªr que c'est bien m√©lang√©'",
  },
};

// Citations d'Olivia
const oliviaQuotes = [
  "C'est √† mon tour !",
  "Je veux la carte avec le papillon !",
  "On peut jouer encore une fois ?",
  "C'est moi qui m√©lange !",
  "Je veux √™tre la premi√®re !",
  "Pourquoi tu as gagn√© ?",
  "Encore une partie !",
  "C'est quoi cette carte ?",
  "Je peux t'aider ?",
];

class ScoreTable {
  constructor() {
    this.initializeScoreTable();
  }

  initializeScoreTable() {
    const scoreTable = document.querySelector(".score-table");
    if (!scoreTable) return;

    // Trouver toutes les lignes du tableau sauf l'en-t√™te
    const rows = Array.from(scoreTable.querySelectorAll("tbody tr"));

    rows.forEach((row) => {
      const cells = Array.from(row.querySelectorAll("td"));

      // Ignorer la date et le nom du jeu (les deux premi√®res colonnes)
      const scoreCells = cells.slice(2);

      // Trouver le meilleur score de la ligne
      const numericScores = scoreCells
        .map((cell) => {
          const text = cell.textContent.trim();
          // Ignorer les m√©dailles et convertir en nombre
          if (
            text.includes("ü•á") ||
            text.includes("ü•à") ||
            text.includes("ü•â")
          ) {
            return -1;
          }
          return parseFloat(text) || -1;
        })
        .filter((score) => score >= 0);

      if (numericScores.length > 0) {
        const maxScore = Math.max(...numericScores);

        // Mettre en √©vidence les meilleurs scores
        scoreCells.forEach((cell) => {
          const score = parseFloat(cell.textContent);
          if (score === maxScore) {
            cell.classList.add("high-score");
          }
        });
      }

      // Ajouter des classes pour les m√©dailles
      scoreCells.forEach((cell) => {
        const text = cell.textContent.trim();
        if (text.includes("ü•á")) cell.classList.add("medal-gold");
        if (text.includes("ü•à")) cell.classList.add("medal-silver");
        if (text.includes("ü•â")) cell.classList.add("medal-bronze");
      });
    });
  }
}

class App {
  constructor() {
    this.modal = null;
    this.scoreTable = null;
    this.initializeEventListeners();
    this.startOliviaQuotes();
  }

  initializeEventListeners() {
    document.addEventListener("DOMContentLoaded", () => {
      // Initialisation de la modale
      this.modal = document.getElementById("playerModal");

      // Initialisation du tableau des scores
      this.scoreTable = new ScoreTable();

      // Initialisation des cartes joueurs
      this.initializePlayerCards();

      // Initialisation des animations de scroll
      this.initScrollAnimations();

      // Fermeture de la modale en cliquant √† l'ext√©rieur
      window.onclick = (event) => {
        if (event.target === this.modal) {
          this.closeModal();
        }
      };

      // Gestion du bouton de fermeture de la modale
      const closeButton = document.querySelector(".close-modal");
      if (closeButton) {
        closeButton.addEventListener("click", () => this.closeModal());
      }

      // Gestion de la touche Echap pour fermer la modale
      document.addEventListener("keydown", (e) => {
        if (
          e.key === "Escape" &&
          this.modal &&
          this.modal.style.display === "flex"
        ) {
          this.closeModal();
        }
      });
    });
  }

  initializePlayerCards() {
    const memberPhotos = document.querySelectorAll(".member-photo");

    memberPhotos.forEach((photo) => {
      const img = photo.querySelector("img");
      if (!img) return;

      const altText = img.alt;
      const playerId = altText.replace("Photo de ", "").toLowerCase();

      // Trouver la carte parente
      const parentCard = photo.closest(".member-card") || photo.parentElement;
      if (parentCard) {
        // Ajouter l'√©v√©nement sur toute la carte
        parentCard.addEventListener("click", (e) => {
          e.preventDefault();
          this.showPlayerDetails(playerId);
        });

        // Ajouter la classe pour les animations
        parentCard.classList.add("animated-card");
      }
    });
  }

  startOliviaQuotes() {
    this.updateOliviaQuote();
    setInterval(() => this.updateOliviaQuote(), 5000);
  }

  updateOliviaQuote() {
    const quoteElement = document.getElementById("oliviaComment");
    if (!quoteElement) return;

    const randomIndex = Math.floor(Math.random() * oliviaQuotes.length);
    const quote = oliviaQuotes[randomIndex];

    // Animation de transition
    quoteElement.style.opacity = "0";
    setTimeout(() => {
      quoteElement.textContent = `"${quote}"`;
      quoteElement.style.opacity = "1";
    }, 300);
  }

  showPlayerDetails(playerId) {
    const player = playerDetails[playerId];
    if (!player || !this.modal) return;

    const playerDetailsElement = document.getElementById("playerDetails");
    if (playerDetailsElement) {
      playerDetailsElement.innerHTML = `
        <h2 class="player-name">${player.name}</h2>
        <p class="player-description">${player.description}</p>
        <div class="player-info">
          <p><strong>Jeu pr√©f√©r√© :</strong> ${player.favoriteGame}</p>
          <p><strong>Fun fact :</strong> ${player.funFact}</p>
        </div>
      `;
    }

    // Afficher et animer la modale
    this.modal.style.display = "flex";
    requestAnimationFrame(() => {
      this.modal.classList.add("active");
    });

    // D√©sactiver le scroll du body
    document.body.style.overflow = "hidden";
  }

  closeModal() {
    if (!this.modal) return;

    this.modal.classList.remove("active");

    // Attendre la fin de l'animation avant de cacher
    setTimeout(() => {
      this.modal.style.display = "none";
      // R√©activer le scroll
      document.body.style.overflow = "";
    }, 300);
  }

  initScrollAnimations() {
    if (!window.IntersectionObserver) return;

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add("visible");
            observer.unobserve(entry.target);
          }
        });
      },
      {
        threshold: 0.1,
        rootMargin: "0px 0px -50px 0px",
      }
    );

    // Observer les √©l√©ments qui doivent √™tre anim√©s
    document
      .querySelectorAll(".member-card, .game-card, .anecdote-card")
      .forEach((element) => observer.observe(element));
  }
}

// Cr√©ation de l'instance unique
const app = new App();

// Export des fonctions globales n√©cessaires
window.showPlayerDetails = (playerId) => app.showPlayerDetails(playerId);
window.closeModal = () => app.closeModal();
